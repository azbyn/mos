#!/usr/bin/env perl

use strict;
use warnings;
#use Template::Mustache;
use Data::Dumper;
use File::Find::Wanted;

my $SRC_DIR   = "src";
my $TARGET    = "mos";
#my $QMAKE     =

my ($BUILD_DIR, $ARCH, $QMAKE, $QMAKE_ARGS);

if ($#ARGV + 1 >= 1 && $ARGV[0] eq "android") {
    $BUILD_DIR = "build_android";
    $ARCH = "-mtriple=armv7-none-linux-android";
    $QMAKE = "/usr/local/Qt-5.11.0/bin/qmake";
    $QMAKE_ARGS = "-spec android-g++ CONFIG+=debug CONFIG+=qml_debug";
}
else {
    $BUILD_DIR = "build";
    $ARCH = "";
    $QMAKE = "qmake";
    $QMAKE_ARGS = "CONFIG+=debug";
}

open MKFILE, ">", 'Makefile';
print MKFILE <<'END';
default:
	@./dmake desktop
	@make -C build
android:
	@./dmake android
	@make -C build_android

clean: desktop_clean
dclean: desktop_dclean
stdddclean: desktop_stddclean
stdlibclean: desktop_stdlibclean


desktop_dclean:
	@make -C build dclean
android_dclean:
	@make -C build_android dclean

desktop_stdlibclean:
	@make -C build stdlibclean
android_stdlibclean:
	@make -C build_android stdlibclean

desktop_stddclean:
	@make -C build stddclean
android_stddclean:
	@make -C build_android stddclean

desktop_clean:
	@make -C build clean
android_clean:
	@make -C build_android clean
END
close MKFILE;

mkdir $BUILD_DIR;

sub find_with_extension {
    my $ext = shift;
    my @files = find_wanted(sub{ -f && /\.$ext/i}, $SRC_DIR);
    return join " \\\n    ", @files;
}

my $headers  = find_with_extension("h");
my $cpp_srcs = find_with_extension("cpp");

my @d_files  = find_wanted(sub{ -f && /\.d/i}, $SRC_DIR);

my $d_objs = "$BUILD_DIR/".join(".o \\\n    $BUILD_DIR/", @d_files).".o";


my $d_objs_a = "build_android/".join(".o \\\n    build_android/", @d_files).".o";
my $d_objs_d = "build/".join(".o \\\n    build/", @d_files).".o";

open PRO_CONF, ">", "$TARGET.pro";
print PRO_CONF <<"END";
QT += quick
CONFIG += c++14
DEFINES += QT_DEPRECATED_WARNINGS

android: defines += ANDROID
QMAKE_CXXFLAGS += -Wfatal-errors -g

android: TARGET = $TARGET
else: TARGET = ../$TARGET

SOURCES += $cpp_srcs

HEADERS += $headers

# -lphobos2-ldc
android: LIBS += -L/home/azbyn/Android/dlang/ldc-build-runtime.tmp/lib \\
#android: LIBS += -L/home/azbyn/Git/com.termux/lib \\
    -ldruntime-ldc -fuse-ld=bfd
else: unix: LIBS += -ldruntime-ldc -ldl

android: OBJECTS += $d_objs_a
else: OBJECTS += $d_objs_d

RESOURCES += res/qml.qrc
INCLUDEPATH += src include


QMAKE_EXTRA_TARGETS += d
PRE_TARGETDEPS += d
d.commands = make -f dlang.mk


QMAKE_EXTRA_TARGETS += dclean
dclean.commands = make -f dlang.mk clean

QMAKE_EXTRA_TARGETS += stddclean
stddclean.commands = make -f dlang.mk stddclean

QMAKE_EXTRA_TARGETS += stdlibclean
stdlibclean.commands = make -f dlang.mk stdlibclean

qnx: target.path = /tmp/\$\${TARGET}/bin
else: unix:!android: target.path = /opt/\$\${TARGET}/bin
!isEmpty(target.path): INSTALLS += target
END
close PRO_CONF;

open DLANG_MK, ">", "$BUILD_DIR/dlang.mk";
select DLANG_MK;


$d_objs =~ s/$BUILD_DIR\/(.+\.d)/$1/g;
my $stdd_objs = "";
my $stdlib_objs = "";
my $rest_objs = "";
sub begins_with {
    return substr($_[0], 0, length($_[1])) eq $_[1];
}
foreach my $f (@d_files) {
    if (begins_with($f, "src/stdd")) {
        $stdd_objs .= "$f.o \\\n";
    } elsif (begins_with($f, "src/mos/stdlib") or
             $f eq "src/mos/imported.d") {
        #print STDOUT "got $f\n";
        $stdlib_objs .= "$f.o \\\n";
    } else {
        $rest_objs .= "$f.o \\\n";
    }
}

print <<"END";
SRC_DIR := ../src
OBJS    := $d_objs
STDD_OBJS := $stdd_objs
STDLIB_OBJS := $stdlib_objs
REST_OBJS := $rest_objs
NDK     := ~/Android/dlang/android-ndk-r16b
CC      := \$(NDK)/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
RTDIR   := /home/azbyn/Android/dlang/ldc-build-runtime.tmp

DC := ldc2
#~/Android/dlang/ldc2-1.8.0-linux-x86_64/bin/ldc2
#~/Git/Calypso/build/bin/ldc2
#~/Git/ldc/build/bin/ldc2

MKDIR_P ?= mkdir -p
END
print <<'END';
default: $(OBJS)


END

for my $f (@d_files) {
    print <<"END";
$f.o: ../$f
	\$(DC) $ARCH -d-debug -g -I../$SRC_DIR -c \$< -of$f.o
END
#-wi-cpp-args -std=c++14 \${INCLUDES} -c \$< -betterC -of$f.o
}

print <<"END";
.PHONY: clean
clean:
	\@rm -vr src/mos/
stdlibclean:
	\@rm -vf \$(STDLIB_OBJS)
stddclean:
	\@rm -vf \$(STDD_OBJS)
END
close DLANG_MK;
#ignore output because we get
#'WARNING: Failure to find: build/src/misc.d.o' and others
print STDOUT "$QMAKE -o $BUILD_DIR/Makefile $TARGET.pro $QMAKE_ARGS 2>&1\n";
`$QMAKE -o $BUILD_DIR/Makefile $TARGET.pro $QMAKE_ARGS 2>&1`;
