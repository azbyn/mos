#!/usr/bin/env perl

use strict;
use warnings;
#use Template::Mustache;
use Data::Dumper;
use File::Find::Wanted;

my $SRC_DIR   = "src";
my $TARGET    = "qt_ts";
my $DLIB      = "dlib";
#my $QMAKE     =

my ($BUILD_DIR, $ARCH, $QMAKE, $QMAKE_ARGS);

if ($#ARGV + 1 >= 1 && $ARGV[0] eq "android") {
    $BUILD_DIR = "build_android";
    $ARCH = "-mtriple=armv7-none-linux-android";
    $QMAKE = "/usr/local/Qt-5.11.0/bin/qmake";
    $QMAKE_ARGS = "-spec android-g++ CONFIG+=debug CONFIG+=qml_debug";
}
else {
    $BUILD_DIR = "build";
    $ARCH = "";
    $QMAKE = "qmake";
    $QMAKE_ARGS = "";
}

open MKFILE, ">", 'Makefile';
print MKFILE <<'END';
default:
	@./dmake desktop
	@make -C build
android:
	@./dmake android
	@make -C build_android

clean: desktop_clean android_clean
desktop_clean:
	@make -C build clean
android_clean:
	@make -C build_android clean
END
close MKFILE;

mkdir $BUILD_DIR;

sub find_with_extension {
    my $ext = shift;
    my @files = find_wanted(sub{ -f && /\.$ext/i}, $SRC_DIR);
    return join " \\\n    ", @files;
}

my $headers  = find_with_extension("h");
my $cpp_srcs = find_with_extension("cpp");

my @d_files  = find_wanted(sub{ -f && /\.d/i}, $SRC_DIR);

my $d_objs = "$BUILD_DIR/".join(".o \\\n    $BUILD_DIR/", @d_files).".o";


my $d_objs_a = "build_android/".join(".o \\\n    build_android/", @d_files).".o";
my $d_objs_d = "build/".join(".o \\\n    build/", @d_files).".o";

open PRO_CONF, ">", 'qt_ts.pro';
print PRO_CONF <<"END";
QT += quick
CONFIG += c++14
DEFINES += QT_DEPRECATED_WARNINGS
QMAKE_CXXFLAGS += -Wfatal-errors

android: TARGET = $TARGET
else: TARGET = ../$TARGET

SOURCES += $cpp_srcs

HEADERS += $headers

# -lphobos2-ldc
android: LIBS += -L/home/azbyn/Android/dlang/ldc-build-runtime.tmp/lib \\
    -ldruntime-ldc -fuse-ld=bfd
else: unix: LIBS += -ldruntime-ldc -ldl

#-L\$\$PWD/build_android -l$DLIB
android: OBJECTS += $d_objs_a
else: OBJECTS += $d_objs_d

RESOURCES += res/qml.qrc
INCLUDEPATH += src include


QMAKE_EXTRA_TARGETS += d
PRE_TARGETDEPS += d
d.commands = make -f dlang.mk

QMAKE_EXTRA_TARGETS += dclean
CLEAN_DEPS += dclean
dclean.commands = make -f dlang.mk clean

qnx: target.path = /tmp/\$\${TARGET}/bin
else: unix:!android: target.path = /opt/\$\${TARGET}/bin
!isEmpty(target.path): INSTALLS += target
END
close PRO_CONF;

open DLANG_MK, ">", "$BUILD_DIR/dlang.mk";
select DLANG_MK;


$d_objs =~ s/$BUILD_DIR\/(.+\.d)/$1/g;

print <<"END";
SRC_DIR := ../src
OBJS    := $d_objs
NDK     := ~/Android/dlang/android-ndk-r16b
CC      := \$(NDK)/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
TARGET  := lib$DLIB.so
RTDIR   := /home/azbyn/Android/dlang/ldc-build-runtime.tmp


#~/Git/Calypso/build/bin/ldc2
DC := ~/Android/dlang/ldc2-1.8.0-linux-x86_64/bin/ldc2
#~/Git/ldc/build/bin/ldc2

MKDIR_P ?= mkdir -p
END
print <<'END';
default: $(OBJS)

#$(TARGET): $(OBJS)
#	$(CC) -Wl,-soname,$(TARGET) -shared --sysroot=$(NDK)/platforms/android-21/arch-arm $(OBJS) $(RTDIR)/lib/libphobos2-ldc.a $(RTDIR)/lib/libdruntime-ldc.a -gcc-toolchain $(NDK)/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -fuse-ld=bfd -target armv7-none-linux-androideabi -llog -landroid -lEGL -lGLESv2 -o $(TARGET)

END

#\$(CC) -Wl,-soname,\$(TARGET) -shared --sysroot=\$(NDK)/platforms/android-21/arch-arm \$(OBJS) \$(LIB_PATH)/libphobos2-ldc.a \$(LIB_PATH)/libdruntime-ldc.a -gcc-toolchain \$(NDK)/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -fuse-ld=bfd -target armv7-none-linux-androideabi -o \$(TARGET)
#libphobos2-ldc.a
#Wl,-soname,libnative-activity.so

#print "default:";
#my $dobj = $d_objs;
#print "$d_objs\n";
for my $f (@d_files) {
    print <<"END";
$f.o: ../$f
	\$(DC) $ARCH -I../$SRC_DIR -c \$< -of$f.o
END
#-wi-cpp-args -std=c++14 \${INCLUDES} -c \$< -betterC -of$f.o
}
print <<"END";
.PHONY: clean
clean:
	\@rm -vf \$(OBJS)
	\@rm -vf build/lib$DLIB.so
	\@rm -vf build/lib$DLIB.a
	\@rm -vf build_android/lib$DLIB.so
	\@rm -vf build_android/lib$DLIB.a
END
close DLANG_MK;
#ignore output because we get
#'WARNING: Failure to find: build/src/misc.d.o' and others
print STDOUT "$QMAKE -o $BUILD_DIR/Makefile qt_ts.pro $QMAKE_ARGS 2>&1\n";
`$QMAKE -o $BUILD_DIR/Makefile qt_ts.pro $QMAKE_ARGS 2>&1`;
